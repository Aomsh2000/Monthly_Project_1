// <auto-generated />
using System;
using HealthSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250325030453_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HealthSystem.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("AppointmentTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("DoctorUserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("PatientUserID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentID");

                    b.HasIndex("DoctorUserID");

                    b.HasIndex("PatientUserID");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HealthSystem.Models.Doctor", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Clinic")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthSystem.Models.Patient", b =>
                {
                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("BloodType")
                        .HasColumnType("int");

                    b.Property<string>("ChronicDiseases")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("UserID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HealthSystem.Models.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DoctorUserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PatientUserID")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("DoctorUserID");

                    b.HasIndex("PatientUserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HealthSystem.Models.WorkingHours", b =>
                {
                    b.Property<int>("WorkingHoursID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("char(36)");

                    b.HasKey("WorkingHoursID");

                    b.HasIndex("UserID");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("HealthSystem.Models.Appointment", b =>
                {
                    b.HasOne("HealthSystem.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthSystem.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSystem.Models.Doctor", b =>
                {
                    b.HasOne("HealthSystem.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("HealthSystem.Models.Doctor", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthSystem.Models.Patient", b =>
                {
                    b.HasOne("HealthSystem.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("HealthSystem.Models.Patient", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HealthSystem.Models.User", b =>
                {
                    b.HasOne("HealthSystem.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSystem.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthSystem.Models.WorkingHours", b =>
                {
                    b.HasOne("HealthSystem.Models.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthSystem.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HealthSystem.Models.Patient", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
